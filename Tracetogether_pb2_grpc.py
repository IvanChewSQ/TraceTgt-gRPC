# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Tracetogether_pb2 as Tracetogether__pb2


class TracetogetherStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.check_in = channel.unary_unary(
                '/Tracetogether/check_in',
                request_serializer=Tracetogether__pb2.CheckIn_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.CheckIn_Reply.FromString,
                )
        self.check_out = channel.unary_unary(
                '/Tracetogether/check_out',
                request_serializer=Tracetogether__pb2.CheckOut_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.CheckOut_Reply.FromString,
                )
        self.check_in_grp = channel.unary_unary(
                '/Tracetogether/check_in_grp',
                request_serializer=Tracetogether__pb2.CheckIn_Grp_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.CheckIn_Grp_Reply.FromString,
                )
        self.check_out_grp = channel.unary_unary(
                '/Tracetogether/check_out_grp',
                request_serializer=Tracetogether__pb2.CheckOut_Grp_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.CheckOut_Grp_Reply.FromString,
                )
        self.get_history = channel.unary_unary(
                '/Tracetogether/get_history',
                request_serializer=Tracetogether__pb2.History_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.History_Reply.FromString,
                )
        self.delcare_locations = channel.unary_unary(
                '/Tracetogether/delcare_locations',
                request_serializer=Tracetogether__pb2.Declare_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.Declare_Reply.FromString,
                )
        self.view_locations = channel.unary_unary(
                '/Tracetogether/view_locations',
                request_serializer=Tracetogether__pb2.ViewLocation_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.ViewLocation_Reply.FromString,
                )
        self.remove_locations = channel.unary_unary(
                '/Tracetogether/remove_locations',
                request_serializer=Tracetogether__pb2.RemoveLocation_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.RemoveLocation_Reply.FromString,
                )
        self.notify_covid_location = channel.unary_unary(
                '/Tracetogether/notify_covid_location',
                request_serializer=Tracetogether__pb2.Notify_Covid_Request.SerializeToString,
                response_deserializer=Tracetogether__pb2.Notify_Covid_Reply.FromString,
                )


class TracetogetherServicer(object):
    """Missing associated documentation comment in .proto file."""

    def check_in(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_out(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_in_grp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_out_grp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_history(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delcare_locations(self, request, context):
        """gRPC for MOH Officers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def view_locations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_locations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notify_covid_location(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TracetogetherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'check_in': grpc.unary_unary_rpc_method_handler(
                    servicer.check_in,
                    request_deserializer=Tracetogether__pb2.CheckIn_Request.FromString,
                    response_serializer=Tracetogether__pb2.CheckIn_Reply.SerializeToString,
            ),
            'check_out': grpc.unary_unary_rpc_method_handler(
                    servicer.check_out,
                    request_deserializer=Tracetogether__pb2.CheckOut_Request.FromString,
                    response_serializer=Tracetogether__pb2.CheckOut_Reply.SerializeToString,
            ),
            'check_in_grp': grpc.unary_unary_rpc_method_handler(
                    servicer.check_in_grp,
                    request_deserializer=Tracetogether__pb2.CheckIn_Grp_Request.FromString,
                    response_serializer=Tracetogether__pb2.CheckIn_Grp_Reply.SerializeToString,
            ),
            'check_out_grp': grpc.unary_unary_rpc_method_handler(
                    servicer.check_out_grp,
                    request_deserializer=Tracetogether__pb2.CheckOut_Grp_Request.FromString,
                    response_serializer=Tracetogether__pb2.CheckOut_Grp_Reply.SerializeToString,
            ),
            'get_history': grpc.unary_unary_rpc_method_handler(
                    servicer.get_history,
                    request_deserializer=Tracetogether__pb2.History_Request.FromString,
                    response_serializer=Tracetogether__pb2.History_Reply.SerializeToString,
            ),
            'delcare_locations': grpc.unary_unary_rpc_method_handler(
                    servicer.delcare_locations,
                    request_deserializer=Tracetogether__pb2.Declare_Request.FromString,
                    response_serializer=Tracetogether__pb2.Declare_Reply.SerializeToString,
            ),
            'view_locations': grpc.unary_unary_rpc_method_handler(
                    servicer.view_locations,
                    request_deserializer=Tracetogether__pb2.ViewLocation_Request.FromString,
                    response_serializer=Tracetogether__pb2.ViewLocation_Reply.SerializeToString,
            ),
            'remove_locations': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_locations,
                    request_deserializer=Tracetogether__pb2.RemoveLocation_Request.FromString,
                    response_serializer=Tracetogether__pb2.RemoveLocation_Reply.SerializeToString,
            ),
            'notify_covid_location': grpc.unary_unary_rpc_method_handler(
                    servicer.notify_covid_location,
                    request_deserializer=Tracetogether__pb2.Notify_Covid_Request.FromString,
                    response_serializer=Tracetogether__pb2.Notify_Covid_Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Tracetogether', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tracetogether(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def check_in(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/check_in',
            Tracetogether__pb2.CheckIn_Request.SerializeToString,
            Tracetogether__pb2.CheckIn_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_out(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/check_out',
            Tracetogether__pb2.CheckOut_Request.SerializeToString,
            Tracetogether__pb2.CheckOut_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_in_grp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/check_in_grp',
            Tracetogether__pb2.CheckIn_Grp_Request.SerializeToString,
            Tracetogether__pb2.CheckIn_Grp_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_out_grp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/check_out_grp',
            Tracetogether__pb2.CheckOut_Grp_Request.SerializeToString,
            Tracetogether__pb2.CheckOut_Grp_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_history(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/get_history',
            Tracetogether__pb2.History_Request.SerializeToString,
            Tracetogether__pb2.History_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delcare_locations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/delcare_locations',
            Tracetogether__pb2.Declare_Request.SerializeToString,
            Tracetogether__pb2.Declare_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def view_locations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/view_locations',
            Tracetogether__pb2.ViewLocation_Request.SerializeToString,
            Tracetogether__pb2.ViewLocation_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_locations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/remove_locations',
            Tracetogether__pb2.RemoveLocation_Request.SerializeToString,
            Tracetogether__pb2.RemoveLocation_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def notify_covid_location(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Tracetogether/notify_covid_location',
            Tracetogether__pb2.Notify_Covid_Request.SerializeToString,
            Tracetogether__pb2.Notify_Covid_Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
